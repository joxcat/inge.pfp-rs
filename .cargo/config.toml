[env]
CARGO_WORKSPACE_DIR = { value = "", relative = true }
CC = { value = "arm-none-eabi-gcc", force = true }
CXX = { value = "arm-none-eabi-g++", force = true }

[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# NOTE: micro:bit v1.X is `nRF51822_xxAA` and v2.X is `nRF52833_xxAA\
runner = "probe-run --chip nRF51822_xxAA"
rustflags = [
  # NOTE: Add stack protection automatically using memory flipping
  # BUG: Does not work well with C++ linking
  #"-C", "linker=flip-link",
  "-C", "linker=arm-none-eabi-g++",
  "-C", "default-linker-libraries=on",
  "-C", "linker-flavor=gcc",
  "-C", "link-arg=-Wl,-Tlink.x",
  "-C", "link-arg=-Wl,-Tdefmt.x",
  # This is needed if your flash or ram addresses are not aligned to 0x10000 in memory.x
  # See https://github.com/rust-embedded/cortex-m-quickstart/pull/95
  "-C", "link-arg=-Wl,--nmagic",
  # HACK: This is needed to ignore the transitives dependencies of linking with C++
  "-C", "link-arg=-Wl,--unresolved-symbols=ignore-in-object-files",
  "-C", "link-arg=-fno-exceptions",
  "-C", "link-arg=-fno-rtti",
  "-C", "link-arg=-fno-threadsafe-statics",
  "-C", "link-arg=-fno-unwind-tables",
  "-C", "link-arg=-fwrapv",
  "-C", "link-arg=-Wl,--gc-sections",
  "-C", "link-arg=-Wl,--sort-common",
  "-C", "link-arg=-Wl,--sort-section=alignment",
  "-C", "link-arg=-Wl,--wrap=main",
  "-C", "link-arg=--specs=nano.specs",
  # HACK: Highly dangerous there must be a better way to do this
  "-C", "link-arg=-Wl,-z muldefs",
  "-C", "link-arg=-Wl,--allow-multiple-definition",
]

[build]
# (`thumbv6m-*` is compatible with all ARM Cortex-M chips but using the right
# target improves performance)
# NOTE: This is the right target for micro:bit v1.X

target = "thumbv6m-none-eabi"    # Cortex-M0 and Cortex-M0+

# NOTE: This is the right target for micro:bit v2.x

# target = "thumbv7em-none-eabihf" # Cortex-M4F and Cortex-M7F (with FPU)

[alias]
xtask = "run --package xtask --"
rb = "run --bin"
rrb = "run --release --bin"

# From Embark standard lints v5 for Rust 1.55+
# https://github.com/EmbarkStudios/rust-ecosystem/blob/1cd09c3428cfa3fc1ee1d82bca949fba38c0f4ea/lints.toml
[target.'cfg(all())']
rustflags = [
    "-Aclippy::doc_markdown",
    "-Wfuture_incompatible",
    "-Wnonstandard_style",
    "-Wrust_2018_idioms",
    "-Wunused", # NOTE: Move this in binaries only if needed
    "-Wclippy::all",
    "-Wclippy::await_holding_lock",
    "-Wclippy::char_lit_as_u8",
    "-Wclippy::checked_conversions",
    "-Wclippy::dbg_macro",
    "-Wclippy::debug_assert_with_mut_call",
    "-Wclippy::disallowed_methods",
    "-Wclippy::disallowed_types",
    "-Wclippy::empty_enum",
    "-Wclippy::enum_glob_use",
    "-Wclippy::exit",
    "-Wclippy::expl_impl_clone_on_copy",
    "-Wclippy::explicit_deref_methods",
    "-Wclippy::explicit_into_iter_loop",
    "-Wclippy::fallible_impl_from",
    "-Wclippy::filter_map_next",
    "-Wclippy::flat_map_option",
    "-Wclippy::float_cmp_const",
    "-Wclippy::fn_params_excessive_bools",
    "-Wclippy::from_iter_instead_of_collect",
    "-Wclippy::if_let_mutex",
    "-Wclippy::implicit_clone",
    "-Wclippy::imprecise_flops",
    "-Wclippy::inefficient_to_string",
    "-Wclippy::invalid_upcast_comparisons",
    "-Wclippy::large_digit_groups",
    "-Wclippy::large_stack_arrays",
    "-Wclippy::large_types_passed_by_value",
    "-Wclippy::let_unit_value",
    "-Wclippy::linkedlist",
    "-Wclippy::lossy_float_literal",
    "-Wclippy::macro_use_imports",
    "-Wclippy::manual_ok_or",
    "-Wclippy::map_err_ignore",
    "-Wclippy::map_flatten",
    "-Wclippy::map_unwrap_or",
    "-Wclippy::match_on_vec_items",
    "-Wclippy::match_same_arms",
    "-Wclippy::match_wild_err_arm",
    "-Wclippy::match_wildcard_for_single_variants",
    "-Wclippy::mem_forget",
    "-Wclippy::mismatched_target_os",
    "-Wclippy::missing_enforced_import_renames",
    "-Wclippy::mut_mut",
    "-Wclippy::mutex_integer",
    "-Wclippy::needless_borrow",
    "-Wclippy::needless_continue",
    "-Wclippy::needless_for_each",
    "-Wclippy::option_option",
    "-Wclippy::path_buf_push_overwrite",
    "-Wclippy::ptr_as_ptr",
    "-Wclippy::rc_mutex",
    "-Wclippy::ref_option_ref",
    "-Wclippy::rest_pat_in_fully_bound_structs",
    "-Wclippy::same_functions_in_if_condition",
    "-Wclippy::semicolon_if_nothing_returned",
    "-Wclippy::single_match_else",
    "-Wclippy::string_add_assign",
    "-Wclippy::string_add",
    "-Wclippy::string_lit_as_bytes",
    "-Wclippy::string_to_string",
    "-Wclippy::todo",
    "-Wclippy::trait_duplication_in_bounds",
    "-Wclippy::unimplemented",
    "-Wclippy::unnested_or_patterns",
    "-Wclippy::unused_self",
    "-Wclippy::useless_transmute",
    "-Wclippy::verbose_file_reads",
    "-Wclippy::zero_sized_map_values"
]
